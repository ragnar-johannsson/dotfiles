call plug#begin('~/.vim/plugged')

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install' }

Plug 'scrooloose/syntastic'
Plug 'fidian/hexmode'

Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'

Plug 'tpope/vim-fugitive'

Plug 'tpope/vim-sleuth'
Plug 'sickill/vim-pasta'

Plug 'itchyny/lightline.vim'

Plug 'nanotech/jellybeans.vim'

Plug 'c.vim'
Plug 'fatih/vim-go', { 'for': 'go' }
Plug 'python.vim', { 'for': 'python' }
Plug 'vim-ruby/vim-ruby', { 'for': 'ruby' }

Plug 'vim-scripts/vim-vagrant'
Plug 'ekalinin/Dockerfile.vim'

Plug 'elzr/vim-json'
Plug 'plasticboy/vim-markdown'

Plug 'mattn/emmet-vim'
Plug 'digitaltoad/vim-jade'
Plug 'pangloss/vim-javascript'

Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-lastpat'
Plug 'beloglazov/vim-textobj-quotes'
Plug 'jceb/vim-textobj-uri'
Plug 'bps/vim-textobj-python'
Plug 'tek/vim-textobj-ruby'
Plug 'michaeljsmith/vim-indent-object'
Plug 'Lokaltog/vim-easymotion'

Plug 'vasconcelloslf/vim-interestingwords'

Plug 'junegunn/vim-peekaboo'

Plug 'mileszs/ack.vim'

Plug 'godlygeek/tabular'

Plug 'bronson/vim-visual-star-search'

Plug 'tpope/vim-endwise'
Plug 'Raimondi/delimitMate'

Plug 'tommcdo/vim-exchange'

Plug 'ntpeters/vim-better-whitespace'

Plug 'bruno-/vim-man'

call plug#end()

set encoding=utf8
set nocompatible

set cindent
set expandtab
set shiftwidth=4
set softtabstop=4
set tabstop=8

set incsearch
set hlsearch

set viminfo='10,\"100,:20,%,n~/.viminfo

set hidden
set wildmenu

set laststatus=2
set timeoutlen=1000 ttimeoutlen=0
set noshowmode

set backspace=indent,eol,start

filetype plugin indent on
syntax on

colorscheme jellybeans
highlight Normal ctermbg=none
highlight NonText ctermbg=none

" Custom mappings
let mapleader="þ"
nnoremap <Leader>p :set paste!<CR>
nnoremap <Leader>l :setlocal number!<CR>
nnoremap <Leader>n :nohlsearch<CR>
nnoremap <Leader>, :CtrlPBuffer<CR>
nnoremap <Leader>m :CtrlPMRUFiles<CR>
nnoremap <Leader>t :set expandtab tabstop=8 shiftwidth=4 softtabstop=4<CR>
nnoremap <Leader>T :set noexpandtab tabstop=4 shiftwidth=4 softtabstop=4<CR>
nnoremap <Leader>W :w !sudo tee % > /dev/null
nnoremap <C-H> :Hexmode<CR>
nnoremap <C-K> :FZF<CR>
noremap ' `
noremap ` '

" Plugin customizations
let g:vim_json_syntax_conceal=0
let g:vim_markdown_folding_disabled=1
let g:pymode_folding=0

" Restore cursor to last position
function! ResCur()
    if line("'\"") <= line("$")
        normal! g`"
        return 1
    endif
endfunction

augroup resCur
    autocmd!
    autocmd BufWinEnter * call ResCur()
augroup END

" Custom functions
com! FormatJSON %!python -m json.tool

" Lightline
let g:lightline = {
    \ 'colorscheme': 'jellybeans',
    \ 'active': {
    \     'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ], ['ctrlpmark'] ]
    \ },
    \ 'component_function': {
    \     'modified': 'LL_Modified',
    \     'readonly': 'LL_Readonly',
    \     'fugitive': 'LL_Fugitive',
    \     'filename': 'LL_Filename',
    \     'fileformat': 'LL_Fileformat',
    \     'filetype': 'LL_Filetype',
    \     'fileencoding': 'LL_Fileencoding',
    \     'mode': 'LL_Mode',
    \     'ctrlpmark': 'LL_CtrlPMark'
    \ }
    \ }

function! LL_Modified()
    if &filetype == "help"
        return ""
    elseif &modified
        return "+"
    elseif &modifiable
        return ""
    else
        return ""
    endif
endfunction

function! LL_Readonly()
    if &filetype == "help"
        return ""
    elseif &readonly
        return "⭤"
    else
        return ""
    endif
endfunction

function! LL_Filename()
    if expand('%:t') =~ 'ControlP'
        return g:lightline.ctrlp_prev . ' ' . g:lightline.subseparator.left . ' ' .
             \ g:lightline.ctrlp_item . ' ' . g:lightline.subseparator.left . ' ' .
             \ g:lightline.ctrlp_next
    endif
    return ('' != LL_Readonly() ? LL_Readonly() . ' ' : '') .
         \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
         \  &ft == 'unite' ? unite#get_status_string() :
         \  &ft == 'vimshell' ? vimshell#get_status_string() :
         \  '' != expand('%:t') ? expand('%:t') : '[No Name]') .
         \ ('' != LL_Modified() ? ' ' . LL_Modified() : '')
endfunction

function! LL_Fileformat()
    return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LL_Filetype()
    return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! LL_Fileencoding()
    return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! LL_Mode()
    return winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! LL_Fugitive()
    if exists("*fugitive#head")
        let _ = fugitive#head()
        return strlen(_) ? '⭠ '._ : ''
    endif
    return ''
endfunction

function! LL_CtrlPMark()
    return expand('%:t') =~ 'ControlP' ? g:lightline.ctrlp_marked : ''
endfunction

let g:ctrlp_status_func = {
    \ 'main': 'LL_CtrlP_1',
    \ 'prog': 'LL_CtrlP_2',
    \ }
function! LL_CtrlP_1(focus, byfname, regex, prev, item, next, marked)
    let g:lightline.ctrlp_prev = a:prev
    let g:lightline.ctrlp_item = a:item
    let g:lightline.ctrlp_next = a:next
    let g:lightline.ctrlp_marked = a:marked
    return lightline#statusline(0)
endfunction
function! LL_CtrlP_2(str)
    return lightline#statusline(0)
endfunction
